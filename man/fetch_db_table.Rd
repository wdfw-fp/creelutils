% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_db_table.R
\name{fetch_db_table}
\alias{fetch_db_table}
\title{Query database tables}
\usage{
fetch_db_table(con, schema, table, filter = NULL, show_query = FALSE)
}
\arguments{
\item{con}{A valid connection to the WDFW PostgreSQL database. @seealso \code{\link[=establish_db_con]{establish_db_con()}}}

\item{schema}{The database schema of interest. Most freshwater creel tasks use the "creel" schema.}

\item{table}{The table or view within the database schema that is to be queried.}

\item{filter}{A \code{dplyr} style filter which may contain one or more elements. See Examples section for more information.}

\item{show_query}{Optional argument that when set to logical 'TRUE' will print the interpolated SQL query that was sent to the database.}
}
\value{
Tibble of query results returned to R from Postgres database.
}
\description{
Helper function to streamline queries of the WDFW Postgres database. It requires a valid database connection. The \code{dbplyr} package is leveraged to convert R code into SQL.

Note: If the 'filter' argument contains a "catch_group" component, the value provided will be parsed into component fields. For example, "Chinook_Adult_AD_Released" is translated to "species_name = 'Chinook', life_stage_name = 'Adult', fin_mark_desc = 'Adclip clip + No other external marks', fate_name = 'Released'".
}
\examples{
\dontrun{

# Basic table query
a <- fetch_db_table(con, "creel", "fishery_location_lut")

# Query with a single filter condition
b <- fetch_db_table(
  con, "creel", "fishery_location_lut",
  filter = "survey_type == 'Index'"
  )

# Query with a vector of filter conditions
c <- fetch_db_table(
  con, "creel", "fishery_location_lut",
  filter = c("survey_type == 'Index'", "section_num == '1'")
  )
}
}
