[{"path":"https://wdfw-fp.github.io/creelutils/articles/creelutils.html","id":"accessing-public-data","dir":"Articles","previous_headings":"","what":"Accessing public data","title":"User Guide","text":"Freshwater recreational creel data made publicly available Washington’s official open data portal, data.wa.gov. Creel datasets comprised multiple elements (e.g., effort, interview, catch data) grouped space time “Fishery Name” identifier. identifier easy way view given creel’s full dataset. example, Skagit winter steelhead 2021 dataset contains effort counts, angler interviews, etc. conducted sections Skagit Sauk rivers 2021-02-01 2021-04-15. Fishery Name function fetch_dwg downloads creel data data.wa.gov Fishery Name primary route accessing complete dataset fishery. don’t know Fishery Name? function fetch_fishery_names(), arguments, returns list fishery names creel database. know part Fishery Name specific syntax? function search_fishery_name() can accept vector characters numbers returns fishery names values.","code":"library(creelutils)  fishery_name <- \"Skagit winter steelhead 2021\" dat <- fetch_dwg(fishery_name) #> # A tibble: 6 × 2 #>   `Data Component` Records #>   <chr>              <int> #> 1 effort              4864 #> 2 ll                     2 #> 3 interview           1860 #> 4 catch                683 #> 5 closures              60 #> 6 fishery_manager       22  #ll stands for latitude and longitude names(dat) #> [1] \"effort\"          \"ll\"              \"interview\"       \"catch\"           #> [5] \"closures\"        \"fishery_manager\"  colnames(dat$effort) #>  [1] \"creel_event_id\"       \"event_date\"           \"water_body\"           #>  [4] \"project_name\"         \"fishery_name\"         \"effort_event_id\"      #>  [7] \"location\"             \"location_id\"          \"tie_in_indicator\"     #> [10] \"count_sequence\"       \"effort_start_time\"    \"effort_end_time\"      #> [13] \"no_count_reason\"      \"comments\"             \"count_type\"           #> [16] \"count_quantity\"       \"location_type\"        \"survey_type\"          #> [19] \"location_season_name\" \"section_num\"          \"surveyor_num\"         #> [22] \"p_census_bank\"        \"p_census_boat\"        \"indirect_census_bank\" #> [25] \"direct_census_bank\" fetch_fishery_names() |> head(n = 10) #>  [1] \"Baker summer sockeye 2022\"   \"Baker summer sockeye 2023\"   #>  [3] \"Cascade fall salmon 2021\"    \"Cascade fall salmon 2022\"    #>  [5] \"Cascade fall salmon 2023\"    \"Cascade fall salmon 2024\"    #>  [7] \"Cascade spring Chinook 2021\" \"Cascade spring Chinook 2022\" #>  [9] \"Cascade spring Chinook 2023\" \"Cascade spring Chinook 2024\" # by water body search_fishery_name(\"Humptulips\") |> head(n = 5) #> [1] \"Humptulips salmon 2019\" \"Humptulips salmon 2020\" \"Humptulips salmon 2021\" #> [4] \"Humptulips salmon 2022\" \"Humptulips salmon 2023\"  # by run / species search_fishery_name(\"winter steelhead\") |> head(n = 5) #> [1] \"Chehalis winter steelhead 2024-25\"   \"Clearwater winter steelhead 2024-25\" #> [3] \"Hoh winter steelhead 2022-23\"        \"Hoh winter steelhead 2023-24\"        #> [5] \"Hoh winter steelhead 2024-25\"  # by year search_fishery_name(\"2025\") |> head(n = 5) #> [1] \"Chehalis Salmon 2025\"                      #> [2] \"Drano Lake salmon and steelhead 2025\"      #> [3] \"Hoh fall salmon 2025\"                      #> [4] \"Humptulips Salmon 2025\"                    #> [5] \"North Fork Skykomish summer gamefish 2025\""},{"path":"https://wdfw-fp.github.io/creelutils/articles/creelutils.html","id":"accessing-internal-data","dir":"Articles","previous_headings":"Accessing public data","what":"Accessing internal data","title":"User Guide","text":"section covers operations require appropriate credentials permissions WDFW’s Postgres creel database. Selected ‘views’ relational database mirrored Washington’s official open data portal, data.wa.gov, public access.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/articles/creelutils.html","id":"connecting-to-database","dir":"Articles","previous_headings":"Accessing public data > Accessing internal data","what":"Connecting to database","title":"User Guide","text":"internal connection Postgres creel database can made using establish_db_con function. called RStudio UI prompt open user enter password. requires proper user credentials setup local computer. first time using method, contact package maintainer assistance.","code":"# con <- establish_db_con()"},{"path":"https://wdfw-fp.github.io/creelutils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Colt Holley. Author, maintainer. Kale Bentley. Author. Evan Booher. Author. Collin Edwards. Author. Dan Auerbach. Contributor. Thomas Buehrens. Contributor.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Holley C, Bentley K, Booher E, Edwards C (2025). creelutils: Utility Functions Interacting Freshwater Creel Data. R package version 0.1.0, https://wdfw-fp.github.io/creelutils.","code":"@Manual{,   title = {creelutils: Utility Functions for Interacting with Freshwater Creel Data},   author = {Colt Holley and Kale Bentley and Evan Booher and Collin Edwards},   year = {2025},   note = {R package version 0.1.0},   url = {https://wdfw-fp.github.io/creelutils}, }"},{"path":"https://wdfw-fp.github.io/creelutils/index.html","id":"creelutils-","dir":"","previous_headings":"","what":"Utility Functions for Interacting with Freshwater Creel Data","title":"Utility Functions for Interacting with Freshwater Creel Data","text":"R package working freshwater recreational creel data. package contains variety utility functions considered general use might applicable various places workflow. also contains functions perform utility process; example, group functions relating extract, transform, load (ETL) process uploading model estimates creel database.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utility Functions for Interacting with Freshwater Creel Data","text":"creelutils can installed GitHub devtools package. GitHub source code repository, requires installation Rtools. One day may distributed binary hosted CRAN.","code":"devtools::install_github(\"wdfw-fp/creelutils\")"},{"path":"https://wdfw-fp.github.io/creelutils/reference/confirm_db_upload.html","id":null,"dir":"Reference","previous_headings":"","what":"Confirm database upload — confirm_db_upload","title":"Confirm database upload — confirm_db_upload","text":"Confirms upload model estimates querying model_analysis_lut session analysis_id.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/confirm_db_upload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confirm database upload — confirm_db_upload","text":"","code":"confirm_db_upload(con, analysis_lut)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/confirm_db_upload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confirm database upload — confirm_db_upload","text":"con Connection WDFW PostgreSQL database made DBI-compliant RPostgres package. 'con' created establish_db_con.R function. analysis_lut Data frame containing session-specific analysis_id associated metadata created generate_analysis_lut.R","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/confirm_db_upload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confirm database upload — confirm_db_upload","text":"nothing returned.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/establish_db_con.html","id":null,"dir":"Reference","previous_headings":"","what":"Establish database connection — establish_db_con","title":"Establish database connection — establish_db_con","text":"Establishes connection WDFW PostgreSQL database. process requires either configured ODBC DSN local config.yml file.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/establish_db_con.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Establish database connection — establish_db_con","text":"","code":"establish_db_con(   conn_type = c(\"odbc\", \"config\"),   dsn = \"creel_estimates\",   config_path = \"config.yml\" )"},{"path":"https://wdfw-fp.github.io/creelutils/reference/establish_db_con.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Establish database connection — establish_db_con","text":"conn_type Character input denoting either \"odbc\" \"config\" connection type. dsn Character string denoting ODBC domain service name (DSN) connect . config_path File path location local 'config.yml' file.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/establish_db_con.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Establish database connection — establish_db_con","text":"DBI connection PostgreSQL database management system. Recommend object named \"con\".","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/export_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Export creel model estimates — export_estimates","title":"Export creel model estimates — export_estimates","text":"Primary control function export, transform, load (ETL) process. Takes standardized model outputs user-input parameters export model estimates appropriately.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/export_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export creel model estimates — export_estimates","text":"","code":"export_estimates(params, analysis_lut, creel_estimates, conn = NULL)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/export_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export creel model estimates — export_estimates","text":"params User-input parameters defined model estimation process. analysis_lut Lookup table created model estimation process stores session-specific analysis_id key metadata analysis. creel_estimates List object containing model estimates standardized format. Typically passed 'transform_estimates' function. conn Database connection object. NULL (default), new connection established.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/export_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export creel model estimates — export_estimates","text":"??","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_db_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Query database tables — fetch_db_table","title":"Query database tables — fetch_db_table","text":"Helper function streamline queries WDFW Postgres database. requires valid database connection. dbplyr package leveraged convert R code SQL. Note: 'filter' argument contains \"catch_group\" component, value provided parsed component fields. example, \"Chinook_Adult_AD_Released\" translated \"species_name = 'Chinook', life_stage_name = 'Adult', fin_mark_desc = 'Adclip clip + external marks', fate_name = 'Released'\".","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_db_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query database tables — fetch_db_table","text":"","code":"fetch_db_table(con, schema, table, filter = NULL, show_query = FALSE)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_db_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query database tables — fetch_db_table","text":"con valid connection WDFW PostgreSQL database. @seealso establish_db_con() schema database schema interest. freshwater creel tasks use \"creel\" schema. table table view within database schema queried. filter dplyr style filter may contain one elements. See Examples section information. show_query Optional argument set logical 'TRUE' print interpolated SQL query sent database.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_db_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query database tables — fetch_db_table","text":"Tibble query results returned R Postgres database.","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_db_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query database tables — fetch_db_table","text":"","code":"if (FALSE) { # \\dontrun{  # Basic table query a <- fetch_db_table(con, \"creel\", \"fishery_location_lut\")  # Query with a single filter condition b <- fetch_db_table(   con, \"creel\", \"fishery_location_lut\",   filter = \"survey_type == 'Index'\"   )  # Query with a vector of filter conditions c <- fetch_db_table(   con, \"creel\", \"fishery_location_lut\",   filter = c(\"survey_type == 'Index'\", \"section_num == '1'\")   ) } # }"},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_dwg.html","id":null,"dir":"Reference","previous_headings":"","what":"Download creel datasets from data.wa.gov — fetch_dwg","title":"Download creel datasets from data.wa.gov — fetch_dwg","text":"Download freshwater recreational fishery creel datasets Washington's public data warehouse, data.wa.gov. valid 'fishery_name' provided several database views downloaded (.e., effort, interview, catch, water bodies, closures, )","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_dwg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download creel datasets from data.wa.gov — fetch_dwg","text":"","code":"fetch_dwg(fishery_name)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_dwg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download creel datasets from data.wa.gov — fetch_dwg","text":"fishery_name Identifier represents spatiotemporal configuration given dataset associated fishery closures.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_dwg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download creel datasets from data.wa.gov — fetch_dwg","text":"dwg, list object containing dataframe database view downloaded (e.g., effort, interview, catch)","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_dwg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download creel datasets from data.wa.gov — fetch_dwg","text":"","code":"if (FALSE) { # \\dontrun{ dwg <- fetch_dwg(\"Skagit winter steelhead 2021\") } # }"},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_fishery_names.html","id":null,"dir":"Reference","previous_headings":"","what":"List all available 'fishery name' values — fetch_fishery_names","title":"List all available 'fishery name' values — fetch_fishery_names","text":"List available 'fishery name' values","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_fishery_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all available 'fishery name' values — fetch_fishery_names","text":"","code":"fetch_fishery_names(...)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_fishery_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all available 'fishery name' values — fetch_fishery_names","text":"... .","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_fishery_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all available 'fishery name' values — fetch_fishery_names","text":"Character vector \"fishery_name\" values represent identifiers given dataset, comprised multiple elements (e.g., effort, interview, catch, etc.).","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/fetch_fishery_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all available 'fishery name' values — fetch_fishery_names","text":"","code":"head(fetch_fishery_names(), n = 10) #>  [1] \"Baker summer sockeye 2022\"   \"Baker summer sockeye 2023\"   #>  [3] \"Cascade fall salmon 2021\"    \"Cascade fall salmon 2022\"    #>  [5] \"Cascade fall salmon 2023\"    \"Cascade fall salmon 2024\"    #>  [7] \"Cascade spring Chinook 2021\" \"Cascade spring Chinook 2022\" #>  [9] \"Cascade spring Chinook 2023\" \"Cascade spring Chinook 2024\""},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_bss_runtime.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize BSS model runtime — get_bss_runtime","title":"Summarize BSS model runtime — get_bss_runtime","text":"Summarize BSS model runtime","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_bss_runtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize BSS model runtime — get_bss_runtime","text":"","code":"get_bss_runtime(stan_fit, output_file = NULL)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_bss_runtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize BSS model runtime — get_bss_runtime","text":"stan_fit 'stanfit' class object output_file Directory save output text file","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_bss_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize priors, sampler settings, and metadata from a stanfit object — get_bss_settings","title":"Summarize priors, sampler settings, and metadata from a stanfit object — get_bss_settings","text":"Summarize priors, sampler settings, metadata stanfit object","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_bss_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize priors, sampler settings, and metadata from a stanfit object — get_bss_settings","text":"","code":"get_bss_settings(ecg, ecg_fit, inputs_bss, print = FALSE)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_bss_settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize priors, sampler settings, and metadata from a stanfit object — get_bss_settings","text":"ecg Estimate catch group (e.g., Steelhead_Adult_UM_Released) ecg_fit fitted model (stanfit object) inputs_bss Inputs stan model print Logical. Return summary Console","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_bss_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize priors, sampler settings, and metadata from a stanfit object — get_bss_settings","text":"List model priors, sampler settings, metadata","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_fishery_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain and format interview, catch, and effort data for sets of fishery-years — get_fishery_data","title":"Obtain and format interview, catch, and effort data for sets of fishery-years — get_fishery_data","text":"Based code written descriptive_statistics.R creelreview package. Streamlines process getting creel data useful format.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_fishery_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain and format interview, catch, and effort data for sets of fishery-years — get_fishery_data","text":"","code":"get_fishery_data(fishery_names, years = NULL)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_fishery_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain and format interview, catch, and effort data for sets of fishery-years — get_fishery_data","text":"fishery_names Character string fishery name vector character strings. years provided, fishery_names combined year create fishery names (see example). years provided, uses character string vector character strings exact fishery names. Try search_fishery_name() see available options. years Integer vector integers identifying years data pull. Optional argument, defaults NULL.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_fishery_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain and format interview, catch, and effort data for sets of fishery-years — get_fishery_data","text":"List three dataframes: $interview, $catch, $effort, $locations, $ll, $closures","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_fishery_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain and format interview, catch, and effort data for sets of fishery-years — get_fishery_data","text":"","code":"if (FALSE) { # \\dontrun{ temp <- get_fishery_data(   fishery_names = \"Nisqually salmon\",   years = 2021:2023)   ## exact definition   temp <- get_fishery_data(   fishery_names = c(\"Skagit fall salmon 2021\", \"Skagit summer gamefish 2022\"))   ## Using the search_fishery_name() function to choose fisheries   temp = get_fishery_data(fishery_names = search_fishery_name(\"cascade winter\")) } # }"},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_hmc_diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize HMC Diagnostics from a Stan Fit — get_hmc_diagnostics","title":"Summarize HMC Diagnostics from a Stan Fit — get_hmc_diagnostics","text":"Computes human-readable summary key Hamiltonian Monte Carlo (HMC) diagnostics fitted Stan model object, including divergences, tree depth saturation, E-BFMI values across chains.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_hmc_diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize HMC Diagnostics from a Stan Fit — get_hmc_diagnostics","text":"","code":"get_hmc_diagnostics(stan_fit)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_hmc_diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize HMC Diagnostics from a Stan Fit — get_hmc_diagnostics","text":"stan_fit fitted Stan model object class stanfit, typically created using rstan::stan() rstan::sampling().","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_hmc_diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize HMC Diagnostics from a Stan Fit — get_hmc_diagnostics","text":"single character string summarizing following diagnostics: Number percentage post-warmup iterations divergences. Number iterations saturated maximum tree depth. E-BFMI values chain, indicating potential energy sampling issues.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/get_hmc_diagnostics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize HMC Diagnostics from a Stan Fit — get_hmc_diagnostics","text":"function reconstructs diagnostics similar rstan::check_hmc_diagnostics() returns formatted character string instead printing console. allows output saved, displayed, logged programmatically. function summarizes key Hamiltonian Monte Carlo (HMC) convergence diagnostics Stan model fit. intended help users assess whether tuning needed using available options like adapt_delta, max_treedepth, prior adjustments. diagnostics reported include: Divergent transitions: less 5% post-warmup iterations. Divergences may indicate poor exploration posterior often require increasing adapt_delta (e.g., 0.75 toward 0.95 0.99) reduce step size. Smaller steps improve numerical stability increase runtime. Maximum tree depth: iterations saturate maximum tree depth. Saturation may co-occur high adapt_delta due long trajectories. frequent, consider increasing max_treedepth default (usually 10–12). E-BFMI: metric checks whether energy transitions HMC efficient. E-BFMI 0.2 sign potential sampling issues, though reparameterization (typically recommended) accessible workflow. Instead, consider revisiting prior distributions improve geometry. function adapted return results text, contrast rstan::check_hmc_diagnostics() prints directly console.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/json_conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert model estimate metadata objects to json format — json_conversion","title":"Convert model estimate metadata objects to json format — json_conversion","text":"Convert model estimate metadata objects json format","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/json_conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert model estimate metadata objects to json format — json_conversion","text":"","code":"json_conversion(type, params, analysis_lut)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/json_conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert model estimate metadata objects to json format — json_conversion","text":"type type metadata convert JSON format storage analysis_lut params user-input parameters defined model estimation process analysis_lut lookup table created model estimation process stores session-specific analysis_id key metadata analysis.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/json_conversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert model estimate metadata objects to json format — json_conversion","text":"Returns analysis_lut new field containing JSON string type","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/json_conversion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert model estimate metadata objects to json format — json_conversion","text":"","code":"if (FALSE) { # \\dontrun{ json_conversion(type = \"script\") json_conversion(type = \"r_session\") } # }"},{"path":"https://wdfw-fp.github.io/creelutils/reference/map_data_grade.html","id":null,"dir":"Reference","previous_headings":"","what":"Map datagrade ?? — map_data_grade","title":"Map datagrade ?? — map_data_grade","text":"Map datagrade ??","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/map_data_grade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map datagrade ?? — map_data_grade","text":"","code":"map_data_grade(params, transformed_bss_data = NULL, transformed_pe_data = NULL)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/map_data_grade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map datagrade ?? — map_data_grade","text":"params ?? transformed_bss_data ?? transformed_pe_data ??","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/map_data_grade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map datagrade ?? — map_data_grade","text":"??","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/prep_export.html","id":null,"dir":"Reference","previous_headings":"","what":"Prep export — prep_export","title":"Prep export — prep_export","text":"Prep export","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/prep_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prep export — prep_export","text":"","code":"prep_export(con, creel_estimates)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/prep_export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prep export — prep_export","text":"con ?? creel_estimates ??","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/prep_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prep export — prep_export","text":"??","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/process_estimates_bss.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — process_estimates_bss","title":"Title — process_estimates_bss","text":"Title","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/process_estimates_bss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — process_estimates_bss","text":"","code":"process_estimates_bss(params, analysis_lut, estimates_bss)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/process_estimates_bss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — process_estimates_bss","text":"params ?? analysis_lut ?? estimates_bss ??","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/process_estimates_bss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — process_estimates_bss","text":"??","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/process_estimates_pe.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — process_estimates_pe","title":"Title — process_estimates_pe","text":"Title","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/process_estimates_pe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — process_estimates_pe","text":"","code":"process_estimates_pe(analysis_lut, estimates_pe, params)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/process_estimates_pe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — process_estimates_pe","text":"analysis_lut ?? estimates_pe ?? params ??","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/process_estimates_pe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — process_estimates_pe","text":"??","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/query_creel_website.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the creel website for specific combinations of data — query_creel_website","title":"Query the creel website for specific combinations of data — query_creel_website","text":"Queries website storing creel data, uses Socrata API (e.g., https://dev.socrata.com/docs/queries/)","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/query_creel_website.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the creel website for specific combinations of data — query_creel_website","text":"","code":"query_creel_website(table_name, query_list, limit = 1e+05)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/query_creel_website.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the creel website for specific combinations of data — query_creel_website","text":"table_name Name table (e.g., catch, interview, effort) query_list Basically filter() statements list named items. Item name matches column name table, item either atomic matched exactly, vector matching multiple options. See details. limit maximum number rows return. Numeric, defaults 100,000","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/query_creel_website.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the creel website for specific combinations of data — query_creel_website","text":"tibble creel data","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/query_creel_website.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query the creel website for specific combinations of data — query_creel_website","text":"query focused filtering, designed written R list, number conditions . example, return data fishery_name \"Baker summer sockeye 2022\", query list include fishery_name = \"Baker summer sockeye 2022\". return data species \"Kokanee\" \"Rainbow Trout\", query list also include species = c(\"Kokanee\", \"Rainbow Trout\").","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/query_creel_website.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the creel website for specific combinations of data — query_creel_website","text":"","code":"dat <- query_creel_website(   table_name = \"catch\",   query_list = list( # each item in list should be named for a column in the table     fishery_name = \"Baker summer sockeye 2022\",     fin_mark = \"UM\",     species = c(\"Kokanee\", \"Rainbow Trout\")     )    ) head(dat) #> # A tibble: 6 × 42 #>   creel_event_id        event_date          water_body project_name fishery_name #>   <chr>                 <dttm>              <chr>      <chr>        <chr>        #> 1 E8B234ED-8173-41DB-B… 2022-08-28 00:00:00 Baker Lake District 14  Baker summe… #> 2 4E8E7F1D-D41F-4FB9-B… 2022-08-27 00:00:00 Baker Lake District 14  Baker summe… #> 3 4E8E7F1D-D41F-4FB9-B… 2022-08-27 00:00:00 Baker Lake District 14  Baker summe… #> 4 88C7E889-48E0-41D1-8… 2022-08-14 00:00:00 Baker Lake District 14  Baker summe… #> 5 7F52BAD4-7C73-48A3-B… 2022-08-05 00:00:00 Baker Lake District 14  Baker summe… #> 6 D729D3DF-0C24-4414-A… 2022-07-20 00:00:00 Baker Lake District 14  Baker summe… #> # ℹ 37 more variables: catch_id <chr>, interview_id <chr>, species <chr>, #> #   run <lgl>, gear_type <chr>, fate <chr>, life_stage <chr>, fin_mark <chr>, #> #   sex <chr>, maturity <lgl>, fork_length_cm <dbl>, total_length_in <lgl>, #> #   fish_processing_status <chr>, cwt_detection_status <chr>, #> #   pit_detection_status <chr>, fish_count <dbl>, scale_card_num <dbl>, #> #   scale_card_pos <dbl>, dna_code <lgl>, pit_code <lgl>, snout_code <lgl>, #> #   scale_age_code <lgl>, scale_pattern <lgl>, comments <chr>, …"},{"path":"https://wdfw-fp.github.io/creelutils/reference/render_progress_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a creel progress report and summaries — render_progress_report","title":"Produce a creel progress report and summaries — render_progress_report","text":"Produces Creel Progress Report given fishery standardized template script. reports primarily used -season monitoring freshwater recreational fisheries contains high level summaries sampling data preliminary estimates total catch effort.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/render_progress_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a creel progress report and summaries — render_progress_report","text":"","code":"render_progress_report(fishery_name, bss_used = FALSE)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/render_progress_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a creel progress report and summaries — render_progress_report","text":"fishery_name Identifier represents spatiotemporal configuration given dataset associated fishery closures. bss_used Logical TRUE FALSE denotes whether estimates produced Bayesian state-space model. default option FALSE.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/render_progress_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce a creel progress report and summaries — render_progress_report","text":"","code":"if (FALSE) { # \\dontrun{ render_progress_report(\"Skykomish summer Chinook and gamefish 2025\") render_progress_report(\"Chehalis winter steelhead 2024-25\", bss_used = TRUE) } # }"},{"path":"https://wdfw-fp.github.io/creelutils/reference/search_fishery_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Find fishery names from a partial names — search_fishery_name","title":"Find fishery names from a partial names — search_fishery_name","text":"Helps identify options fetch_dwg().","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/search_fishery_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find fishery names from a partial names — search_fishery_name","text":"","code":"search_fishery_name(fishery_partial)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/search_fishery_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find fishery names from a partial names — search_fishery_name","text":"fishery_partial Partial fishery name. Can take regular expressions, ignores capitalization.","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/search_fishery_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find fishery names from a partial names — search_fishery_name","text":"Character vector 'fishery_name' identifiers containing partial value.","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/search_fishery_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find fishery names from a partial names — search_fishery_name","text":"","code":"search_fishery_name(\"gamefish\") #>  [1] \"Cascade winter gamefish 2021-22\"                     #>  [2] \"Cascade winter gamefish 2023\"                        #>  [3] \"Nooksack winter gamefish 2021-22\"                    #>  [4] \"Nooksack winter gamefish 2022-23\"                    #>  [5] \"North Fork Skykomish summer gamefish 2025\"           #>  [6] \"Skagit spring gamefish 2025\"                         #>  [7] \"Skagit summer gamefish 2022\"                         #>  [8] \"Skagit summer gamefish 2024\"                         #>  [9] \"Skagit winter gamefish 2021-22\"                      #> [10] \"Skagit winter gamefish 2022-23\"                      #> [11] \"Skagit winter gamefish 2024\"                         #> [12] \"Skagit winter gamefish 2025\"                         #> [13] \"Skykomish summer Chinook and gamefish 2022\"          #> [14] \"Skykomish summer Chinook and gamefish 2025\"          #> [15] \"Skykomish summer gamefish 2023\"                      #> [16] \"Skykomish winter gamefish 2021-22\"                   #> [17] \"Skykomish winter gamefish 2022-23\"                   #> [18] \"Snoqualmie summer gamefish 2025\"                     #> [19] \"South Fork Skykomish summer gamefish 2025\"           #> [20] \"South Fork Stillaguamish summer gamefish 2024 upper\" #> [21] \"Stillaguamish salmon and gamefish 2022-23\"           #> [22] \"Stillaguamish salmon and gamefish 2023-24\"           #> [23] \"Stillaguamish salmon and gamefish 2024-25\"           #> [24] \"Stillaguamish salmon and gamefish 2025-26\"           #> [25] \"Wallace salmon and gamefish 2022-23\"                 #> [26] \"Wallace salmon and gamefish 2023-24\"                 #> [27] \"Wallace salmon and gamefish 2024-25\"                 search_fishery_name(\"Humptulips\") #> [1] \"Humptulips Salmon 2025\"              \"Humptulips salmon 2019\"              #> [3] \"Humptulips salmon 2020\"              \"Humptulips salmon 2021\"              #> [5] \"Humptulips salmon 2022\"              \"Humptulips salmon 2023\"              #> [7] \"Humptulips salmon 2024\"              \"Humptulips winter steelhead 2024-25\""},{"path":"https://wdfw-fp.github.io/creelutils/reference/transform_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform individual model outputs into a single object — transform_estimates","title":"Transform individual model outputs into a single object — transform_estimates","text":"Transform individual model outputs single object","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/transform_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform individual model outputs into a single object — transform_estimates","text":"","code":"transform_estimates(dwg, transformed_pe_data, transformed_bss_data)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/transform_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform individual model outputs into a single object — transform_estimates","text":"dwg list object containing freshwater creel dataset, returned fetch_dwg() transformed_pe_data standardized outputs PE model, returned process_pe_estimates() transformed_bss_data standardized outputs BSS model, returned process_bss_estimates()","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/transform_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform individual model outputs into a single object — transform_estimates","text":"list object containing standardized model estimates","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/write_lut.html","id":null,"dir":"Reference","previous_headings":"","what":"Write look-up table — write_lut","title":"Write look-up table — write_lut","text":"Write look-table","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/write_lut.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write look-up table — write_lut","text":"","code":"write_lut(con, analysis_lut, max_retries = 5)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/write_lut.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write look-up table — write_lut","text":"con valid DBI connection. @seealso establish_db_con() analysis_lut lookup table created model estimation process stores session-specific analysis_id key metadata analysis. max_retries maximum number times try write; numeric, defaults 5.","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/write_stratum.html","id":null,"dir":"Reference","previous_headings":"","what":"Write stratum — write_stratum","title":"Write stratum — write_stratum","text":"Write stratum","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/write_stratum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write stratum — write_stratum","text":"","code":"write_stratum(con, creel_estimates_db)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/write_stratum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write stratum — write_stratum","text":"con valid DBI connection. @seealso establish_db_con() creel_estimates_db list object containing standardized model outputs processed prep_export() join certain fields database lookup tables prior exportation.","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/reference/write_total.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Total — write_total","title":"Write Total — write_total","text":"Write Total","code":""},{"path":"https://wdfw-fp.github.io/creelutils/reference/write_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Total — write_total","text":"","code":"write_total(con, creel_estimates_db)"},{"path":"https://wdfw-fp.github.io/creelutils/reference/write_total.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Total — write_total","text":"con valid DBI connection. @seealso establish_db_con() creel_estimates_db list object containing standardized model outputs processed prep_export() join certain fields database lookup tables prior exportation.","code":""},{"path":[]},{"path":"https://wdfw-fp.github.io/creelutils/news/index.html","id":"creelutils-010","dir":"Changelog","previous_headings":"","what":"creelutils 0.1.0","title":"creelutils 0.1.0","text":"Early development version. Putting package together basic structure, documentation, GitHub actions, etc.","code":""}]
